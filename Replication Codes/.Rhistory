source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/main_estimation.R')
install.packages("dummies")
install.packages("plyr")
install.packages("plyr")
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/main_estimation.R')
install.packages("matrixcalc")
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/main_estimation.R')
r_BIC
ljoint
coint_BIC <- IC_all_dyn_coint(data,fspecs=fspecs,max_diff=0.1,func=function(x){8*(x-1)})
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/estim_coint_main.R')
coint_BIC <- IC_all_dyn_coint(data,fspecs=fspecs,max_diff=0.1,func=function(x){8*(x-1)})
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/main_estimation.R')
# Estimate recovery times (basis for Table 4)
# time_taken_determ <- sim_recovery_time_par(y_jointlambda,r_jointlambda,fspecs=fspecs, start=c(rating=6,yield=eq_plot$yfair[1,2]),empirical_changes=empirical_changes, periods=6000,determ=TRUE)
time_taken_yshock <- sim_recovery_time_par(y_jointlambda,r_jointlambda,fspecs=fspecs, start=c(rating=6,yield=eq_plot$yfair[1,2]),empirical_changes=empirical_changes, periods=6000,determ=FALSE)
save.image(filenme)
eq_plot$yfair
# Calculate IRFs for different downgrade scenarios (basis for IRF plots)
std_eps <- sd(y_jointlambda$res_smooth$residuals[1:length(y_jointlambda$pre$Y)])
# Case 1: rating downgrade by two notches
IRF_eqyields_down <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 2: rating downgrade by two notches, but staggered in two steps
IRF_eqyields_staggered <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=c(1,1),conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 3: rating upgrade by two notches
IRF_eqyields_up <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=-2,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Estimate recovery times (basis for Table 4)
# time_taken_determ <- sim_recovery_time_par(y_jointlambda,r_jointlambda,fspecs=fspecs, start=c(rating=6,yield=eq_plot$yfair[1,2]),empirical_changes=empirical_changes, periods=6000,determ=TRUE)
# time_taken_yshock <- sim_recovery_time_par(y_jointlambda,r_jointlambda,fspecs=fspecs, start=c(rating=6,yield=eq_plot$yfair[1,2]),empirical_changes=empirical_changes, periods=6000,determ=FALSE)
# save.image(filenme)
# Estimate IRFs for real-world scenarios
scen_ITA <- IRF_scenario_par(5,1992,country="Italy",periods_start=5,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
save.image(filenme)
scen_GRE_I <- IRF_scenario_par(9,2009,country="Greece",periods_start=11,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
save.image(filenme)
# Calculate IRFs for different downgrade scenarios (basis for IRF plots)
std_eps <- sd(y_jointlambda$res_smooth$residuals[1:length(y_jointlambda$pre$Y)])
# Case 1: rating downgrade by two notches
IRF_eqyields_down <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 2: rating downgrade by two notches, but staggered in two steps
IRF_eqyields_staggered <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=c(1,1),conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 3: rating upgrade by two notches
IRF_eqyields_up <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=-2,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Calculate IRFs for different downgrade scenarios (basis for IRF plots)
std_eps <- sd(y_jointlambda$res_smooth$residuals[1:length(y_jointlambda$pre$Y)])
# Case 1: rating downgrade by two notches
IRF_eqyields_down <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/IRF_yshock_bs.R')
std_eps <- sd(y_jointlambda$res_smooth$residuals[1:length(y_jointlambda$pre$Y)])
# Case 1: rating downgrade by two notches
IRF_eqyields_down <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 2: rating downgrade by two notches, but staggered in two steps
IRF_eqyields_staggered <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=c(1,1),conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Case 3: rating upgrade by two notches
IRF_eqyields_up <- IRF_mult(data,coeffs_bs1000$tab_y,coeffs_bs1000$tab_r,std_y = std_eps,fspecs=fspecs,empirical_changes,eq_plot$yfair,downgrade=-2,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99,"-sd","+sd"),diff_to_benchmark=TRUE)
save.image(filenme)
# Estimate IRFs for real-world scenarios
scen_ITA <- IRF_scenario_par(5,1992,country="Italy",periods_start=5,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
save.image(filenme)
# Estimate IRFs for real-world scenarios
scen_ITA <- IRF_scenario_par(5,1992,country="Italy",periods_start=5,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
save.image(filenme)
source('T:/GSZ/Dropbox/Cooperations/mei_gsz/Risk and Return/Sharing/Replication Codes/extract_scenario.r')
# Estimate IRFs for real-world scenarios
scen_ITA <- IRF_scenario_par(5,1992,country="Italy",periods_start=5,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
# Estimate IRFs for real-world scenarios
scen_ITA <- IRF_scenario_par(5,1992,country="Italy",periods_start=5,data=data,fspecs=fspecs,res_yields=y_jointlambda,res_ratings=r_jointlambda,coeffs_bs=coeffs_bs1000,empirical_changes=empirical_changes,conf_lvls=c(0.01,0.05,0.1,0.2,0.5,0.8,0.9,0.95,0.99))
save.image(filenme)
